
#include <stdio.h>
#include <stdlib.h>
#include "diag/Trace.h"

#include "Timer.h"
#include "BlinkLed.h"


#define BLINK_ON_TICKS  (TIMER_FREQUENCY_HZ * 3 / 4)
#define BLINK_OFF_TICKS (TIMER_FREQUENCY_HZ - BLINK_ON_TICKS)

// ----- main() ---------------------------------------------------------------

// Sample pragmas to cope with warnings. Please note the related line at
// the end of this function, used to pop the compiler diagnostics status.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"

#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"
//#include "_printf.c"
//#include "_delay.c"

// Pin number define
#define TRIG GPIO_PIN_0
#define ECHO GPIO_PIN_1
#define USART1_TX GPIO_PIN_9
#define USART1_RX GPIO_PIN_10

// UART 통신을 위한 정릐
#define TxBufferSize   (countof(UART_TxBuffer) - 1)   // 송신 버퍼 사이즈 정의
#define RxBufferSize   0xFF   // 수신 버퍼 사이즈를 0xFF로 정의
#define countof(a)   (sizeof(a) / sizeof(*(a)))   // 데이터 사이즈

GPIO_InitTypeDef GPIO_Init_Struct;   // GPIO의 초기화를 위한 구조체형의 변수를 선언
TIM_HandleTypeDef   TimHandle2;
UART_HandleTypeDef   UartHandle;   // UART의 초기화를 위한 구조체형의 변수를 선언

// UART 통신용 변수 선언
char UART_TxBuffer[] = "UART Ultra Sonic Test\n\r";
uint8_t RxBuffer[RxBufferSize];

uint32_t pulse_count = 0;
uint8_t toggle = 0;

// 변수선언
int adc_value;   // ADC값 저장 변수

void ms_delay_int_count(volatile unsigned int nTime)
{
   nTime = (nTime * 14000);
   for(; nTime > 0; nTime--);
}
void us_delay_int_count(volatile unsigned int nTime)
{
   nTime = (nTime * 14);
   for(; nTime > 0; nTime--);
}





#define countof(a)   (sizeof(a)/sizeof(*(a)))
#define TxBufferSize (countof(TxBuffer)-1)
#define RxBufferSize   (0xFF)

uint8_t TxBuffer[] = "Booting_UART1\n\r";
uint8_t RxBuffer[RxBufferSize];

void UART_config(void) {  // PA9(UART1_Tx), PA10(UART1_Rx)

   // UART1의 클럭을 활성화
   __HAL_RCC_GPIOA_CLK_ENABLE();
   __HAL_RCC_USART1_CLK_ENABLE();
   // GPIO A포트 9번 핀을 USART Tx, 10번 핀을 USART Rx로 설정
   GPIO_Init_Struct.Pin = USART1_TX | USART1_RX;
   GPIO_Init_Struct.Mode = GPIO_MODE_AF_PP;
   GPIO_Init_Struct.Pull = GPIO_NOPULL;
   GPIO_Init_Struct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   GPIO_Init_Struct.Alternate = GPIO_AF7_USART1;
   HAL_GPIO_Init(GPIOA, &GPIO_Init_Struct);
   // UART의 동작 조건 설정
   UartHandle.Instance = USART1;
   UartHandle.Init.BaudRate = 9600;
   UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
   UartHandle.Init.StopBits = UART_STOPBITS_1;
   UartHandle.Init.Parity = UART_PARITY_NONE;
   UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   UartHandle.Init.Mode= UART_MODE_TX_RX;
   UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
   // UART 구성정보를 UartHandle에 설정된 값으로 초기화 함
   HAL_UART_Init(&UartHandle);
}
// TRIG(PC0), ECH0(PC1)
int Ultra_Sonic_Config() {
   // Enable GPIOC clock
   __HAL_RCC_GPIOC_CLK_ENABLE();

   // Configure PC0 I0 in output
   GPIO_Init_Struct.Pin = TRIG;
   GPIO_Init_Struct.Mode = GPIO_MODE_OUTPUT_PP;
   GPIO_Init_Struct.Pull = GPIO_NOPULL;
   GPIO_Init_Struct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   HAL_GPIO_Init(GPIOC, &GPIO_Init_Struct);

   // Configure PC1 pin as input
   GPIO_Init_Struct.Pin = ECHO;
   GPIO_Init_Struct.Mode = GPIO_MODE_IT_RISING;
   HAL_GPIO_Init(GPIOC, &GPIO_Init_Struct);
   // Enable and set EXTI Line0 Interrupt to the lowest priority
   HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
   HAL_NVIC_EnableIRQ(EXTI1_IRQn);
   HAL_GPIO_WritePin(GPIOC, TRIG, GPIO_PIN_RESET);
}

void pulse() {   // 10usec High 펄스 출력
   HAL_GPIO_WritePin(GPIOC, TRIG, GPIO_PIN_SET);   // input pulse -> PC0
   us_delay_int_count(10);
   HAL_GPIO_WritePin(GPIOC, TRIG, GPIO_PIN_RESET);   // input pulse -> PC0
}

void timer2_config(void);

int main(int argc, char* argv[]) {
   // Infinite loop
   RCC->AHB1ENR = 0x00000002;
   GPIOB->MODER = 0x40000000;
   GPIOB->OTYPER = 0;
   GPIOB->PUPDR = 0;
   GPIOB->OSPEEDR = 0;

   UART_config();

   Ultra_Sonic_Config();

//   timer2_config();

   HAL_UART_Transmit(&UartHandle, (uint8_t*)TxBuffer, TxBufferSize, 0xFFFF);


   unsigned int period, buf;

   while (1) {
      pulse();
      ms_delay_int_count(1000);

//      playNote(0);
//      playNote(1);
//      playNote(2);
//      playNote(3);
//      playNote(4);
//      playNote(5);
//      playNote(6);
//      playNote(7);

//      if(HAL_UART_Receive(&UartHandle, (uint8_t*)RxBuffer, 1, 5)==HAL_OK){
//         RxBuffer[0] += 1;  //a를 누르면 b가 된다.
//         HAL_UART_Transmit(&UartHandle, (uint8_t*)RxBuffer, 1, 5);
//      }

   }
   // Infinite loop, never return.
}

// 인터럽트 루틴
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
   pulse_count++;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
   if (toggle == 0) {   // 카운터를 시작하고 외부인터럽트(INT0)를 다음에는 falling Edge에서 걸리도록 설정
      pulse_count = 0;   // 측정된 이전 거리값 초기화

      //Start Timer
      HAL_TIM_Base_Start_IT(&TimHandle2);

      //외부인터럽트 INT0 falling edge에서 인터럽트 발생
      GPIO_Init_Struct.Pin = ECHO;
      GPIO_Init_Struct.Mode = GPIO_MODE_IT_FALLING;
      HAL_GPIO_Init(GPIOC, &GPIO_Init_Struct);

      toggle = 1;
   } else {
      //Stop Timer
      HAL_TIM_Base_Stop_IT(&TimHandle2);
      //외부인터럽트 INT0 falling edge에서 인터럽트 발생
      GPIO_Init_Struct.Pin = ECHO;
      GPIO_Init_Struct.Mode = GPIO_MODE_IT_RISING;
      HAL_GPIO_Init(GPIOC, &GPIO_Init_Struct);

      toggle = 0;

      sprintf(UART_TxBuffer, "time : %d us, distance(cm) : %d\r\n", (int)pulse_count*58, (int)pulse_count);
      HAL_UART_Transmit(&UartHandle, (uint8_t*)UART_TxBuffer, strlen(UART_TxBuffer), 0xFFFF);
      clcd_put_string(UART_TxBuffer);
   }
}

#pragma GCC diagnostic pop


// ----------------------------------------------------------------------------