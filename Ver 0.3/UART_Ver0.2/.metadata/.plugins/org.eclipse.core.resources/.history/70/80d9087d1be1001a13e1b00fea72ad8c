/*
 * This file is part of the 쨉OS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2014 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

// ----------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include "diag/Trace.h"

#include "Timer.h"
#include "BlinkLed.h"

// ----------------------------------------------------------------------------
//
// Standalone STM32F4 led blink sample (trace via ITM).
//
// In debug configurations, demonstrate how to print a greeting message
// on the trace device. In release configurations the message is
// simply discarded.
//
// Then demonstrates how to blink a led with 1 Hz, using a
// continuous loop and SysTick delays.
//
// Trace support is enabled by adding the TRACE macro definition.
// By default the trace messages are forwarded to the ITM output,
// but can be rerouted to any device or completely suppressed, by
// changing the definitions required in system/src/diag/trace_impl.c
// (currently OS_USE_TRACE_ITM, OS_USE_TRACE_SEMIHOSTING_DEBUG/_STDOUT).
//

// ----- Timing definitions -------------------------------------------------

// Keep the LED on for 2/3 of a second.
#define BLINK_ON_TICKS  (TIMER_FREQUENCY_HZ * 3 / 4)
#define BLINK_OFF_TICKS (TIMER_FREQUENCY_HZ - BLINK_ON_TICKS)

// ----- main() ---------------------------------------------------------------

// Sample pragmas to cope with warnings. Please note the related line at
// the end of this function, used to pop the compiler diagnostics status.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"

#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"

#define TRIG GPIO_PIN_0
TIM_HandleTypeDef   TimHandle2;
uint32_t pulse_count = 0;
uint8_t toggle = 0;

void pulse() {   // 10usec High 펄스 출력
   HAL_GPIO_WritePin(GPIOC, TRIG, GPIO_PIN_SET);   // input pulse -> PC0
   us_delay_int_count(10);
   HAL_GPIO_WritePin(GPIOC, TRIG, GPIO_PIN_RESET);   // input pulse -> PC0
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
   pulse_count++;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
   if (toggle == 0) {   // 카운터를 시작하고 외부인터럽트(INT0)를 다음에는 falling Edge에서 걸리도록 설정
      pulse_count = 0;   // 측정된 이전 거리값 초기화

      //Start Timer
      HAL_TIM_Base_Start_IT(&TimHandle2);

      //외부인터럽트 INT0 falling edge에서 인터럽트 발생
      GPIO_Init_Struct.Pin = ECHO;
      GPIO_Init_Struct.Mode = GPIO_MODE_IT_FALLING;
      HAL_GPIO_Init(GPIOC, &GPIO_Init_Struct);

      toggle = 1;
   } else {
      //Stop Timer
      HAL_TIM_Base_Stop_IT(&TimHandle2);
      //외부인터럽트 INT0 falling edge에서 인터럽트 발생
      GPIO_Init_Struct.Pin = ECHO;
      GPIO_Init_Struct.Mode = GPIO_MODE_IT_RISING;
      HAL_GPIO_Init(GPIOC, &GPIO_Init_Struct);

      toggle = 0;

      sprintf(UART_TxBuffer, "time : %d us, distance(cm) : %d\r\n", (int)pulse_count*58, (int)pulse_count);
      HAL_UART_Transmit(&UartHandle, (uint8_t*)UART_TxBuffer, strlen(UART_TxBuffer), 0xFFFF);
      clcd_put_string(UART_TxBuffer);
   }
}

int
main(int argc, char* argv[])
{
  // Send a greeting to the trace device (skipped on Release).


  // Infinite loop
  while (1)
    {

    }
  // Infinite loop, never return.
}

#pragma GCC diagnostic pop

// ----------------------------------------------------------------------------
